import React, { useState } from 'react'
import { useRouter } from 'next/router'
import Layout from '@/components/common/Layout'
import { ButtonSpinner } from '@/components/Helper';
import axios from 'axios';
import Head from 'next/head';
import useSWR from 'swr'
import Breadcrumb from '@/components/common/Breadcrumb';

const fetcher = (url, token) => axios.get(url, { headers: { token: `${localStorage.getItem("lr-admin-token")}` } }).then(res => res.data)

export default function Profile() {
    const router = useRouter()
    const [tinyloader, setTinyloader] = useState(false);
    const [user, setUser] = useState('')
    const [success, setSuccess] = useState('')
    const [formData, setFormData] = useState('')
    const { data, error } = useSWR(`${process.env.NEXT_PUBLIC_URL}admin/profile`, fetcher)
    if (error) console.log(error);
    // if (data) console.log(data);


    const eventChangeHandler = (e) => {
        setFormData((prevState) => ({
            ...prevState,
            [e.target.name]: e.target.value
        }));
    }

    const updateProfile = async (e) => {
        e.preventDefault();
        setTinyloader(true);
        await axios.post(`${process.env.NEXT_PUBLIC_URL}admin/update-profile`, formData, {
            headers: {
                'token': typeof window !== "undefined" ? localStorage.getItem("lr-admin-token") : false,
            }
        }).then(function (res) {
            setTinyloader(false)
            if (res.data.status == 1) {
                setUser(res.data.admin)
                setSuccess(res.data.message)
                router.push('/admin/profile')
            }
        }).catch(function (error) {
            console.log(error)

        });
    }

    const logoutUser = async () => {
        await axios.get(`${process.env.NEXT_PUBLIC_URL}admin/logout`, {
            headers: {
                'token': typeof window !== "undefined" ? localStorage.getItem("lr-admin-token") : false,
            }
        }).then(function (res) {
            if (res.data.status == 1) {
                localStorage.removeItem("lr-admin-token");
                console.log(res.data)
            }
            router.push('/login')
        }).catch(function (error) {
            console.log(error)

        });
    }

    return (
        <>
            <Head>
                <title>LR | Admin Profile </title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link
                    href="/img/lr-favicon.ico"
                    rel="icon"
                    media="(prefers-color-scheme: light)"
                />
                <link
                    href="/img/lr-favicon-dark.ico"
                    rel="icon"
                    media="(prefers-color-scheme: dark)"
                />
            </Head>
            <Layout>
                <div className="row row-cols-1 row-cols-md-3 g-4">
                    <Breadcrumb title="Profile" />
                    {data && (<>
                        {data.admin ?
                            <div className="form-style">
                                <div className="wrapper">
                                    <div className="form-row">
                                        <div className="form-div">
                                            <input type="hidden" defaultValue={data.admin._id} />
                                            <input id="username" name='name' defaultValue={user ? user.name : data.admin.name} type="text" placeholder=" " onChange={(e) => eventChangeHandler(e)} />
                                            <label htmlFor="username">Name</label>

                                            {/* <div className="error">vxv</div> */}
                                        </div>
                                        <div className="form-div">
                                            <input id="useremail" name="email" defaultValue={user ? user.email : data.admin.email} type="text" placeholder=" " onChange={(e) => eventChangeHandler(e)} />
                                            <label htmlFor="useremail">Email</label>

                                            {/* <div className="error">vxv</div> */}
                                        </div>

                                        <div className="form-div">
                                            <input id="useraddress" name='address' defaultValue={user ? user.address : data.admin.address} type="text" placeholder=" " onChange={(e) => eventChangeHandler(e)} />
                                            <label htmlFor="useraddress">Address</label>

                                            {/* <div className="error">vxv</div> */}
                                        </div>
                                        {/* 
                                        <div className="form-div">
                                            <input id="usercontact" name='contact' defaultValue={user ? user.contact : data.admin.contact} type="text" placeholder=" " onChange={(e) => eventChangeHandler(e)} />
                                            <label htmlFor="usercontact">Contact</label>

                                            <div className="error">vxv</div>
                                        </div> */}

                                    </div>
                                    <div className="common-buttons">
                                        <button type='button' className="green" onClick={(e) => updateProfile(e)} disabled={tinyloader}>
                                            <ButtonSpinner load={tinyloader} btnName="Edit" />
                                        </button>

                                        <button className="duplicate" onClick={() => logoutUser()}>logout</button>
                                    </div>

                                    <div className={`succes`} style={{ display: `${tinyloader ? 'none' : 'block'}` }}>{success}</div>

                                    <div>

                                    </div>

                                </div>

                            </div>
                            : ''}
                    </>)}
                </div>

            </Layout>
        </>
    )
}

// export async function getStaticProps() {

//     try {
//         const result = fetcher;
//         const data = result.data;
//         return {
//             props: {
//                 data: data
//             }
//         }
//     } catch (error) {
//         console.log(error);
//     }
// }
