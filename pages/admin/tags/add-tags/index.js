import Layout from '@/components/common/Layout'
import React, { useEffect, useState } from 'react'
import Head from 'next/head'
import Breadcrumb from '@/components/common/Breadcrumb'
import { ButtonSpinner, createSlug } from '@/components/Helper'
import axios from 'axios'
import { useRouter } from 'next/router'
import { useForm } from 'react-hook-form';
import { yupResolver } from '@hookform/resolvers/yup';
import * as Yup from 'yup';


export default function Index() {

    const [tinyloader, setTinyloader] = useState(false)
    const router = useRouter()
    const [data, setData] = useState('')
    const query = router.query.id


    const validationSchema = Yup.object().shape({
        name: Yup.string()
            .required('Tag name is required'),
        slug: Yup.string()
            .required('Tag slug is required'),
    });

    const formOptions = { resolver: yupResolver(validationSchema) };
    const { register, handleSubmit, reset, formState } = useForm(formOptions);
    const { errors } = formState;

    const onSubmit = async (data) => {
        setTinyloader(true);
        const addUrl = `${process.env.NEXT_PUBLIC_URL}admin/add-tag`
        const updateUrl = `${process.env.NEXT_PUBLIC_URL}admin/update-tag/${query}`

        await axios.post(`${query && query !== "undefined" ? updateUrl : addUrl}`, data, {
            headers: {
                'token': typeof window !== "undefined" ? localStorage.getItem("lr-admin-token") : false,
            }
        }).then(function (res) {
            setTinyloader(false)
            if (res.data.status == 1) {
                alert(res.data.message);
                router.push('/admin/tags')
            }
        }).catch(function (error) {
            console.log(error)

        });

    }

    const getTagList = async () => {
        axios.get(`${process.env.NEXT_PUBLIC_URL}admin/view-tag?id=${query}`, {
            headers: {
                'token': typeof window !== "undefined" ? localStorage.getItem("lr-admin-token") : false,
            }
        }).then(function (res) {
            if (res.data.status == 1) {
                setData(res.data.data)
            }
        }).catch(function (error) {
            console.log(error)

        });
    }
    useEffect(() => {
        if (query) {
            getTagList()
        }
    }, [query])

    return (
        <>
            <Head>
                <title>LR | {query ? 'Update' : 'Add'} Tags </title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="img/favicon.ico" />
            </Head>
            <Layout>
                <Breadcrumb title={query !== "undefined" ? 'Update Tags' : ' Add Tags'} />
                <div className="form-style">
                    <form action="" id="fuelTypeForm" onSubmit={handleSubmit(onSubmit)} method="POST" autoComplete='off'>
                        <div className="wrapper">
                            <div className="form-row">
                                <div className="form-div">
                                    <input type="hidden" name="id" value={data && data._id ? data._id : ''} />
                                    <input id="name" name='name' placeholder=' ' {...register('name')} type="text" onKeyUp={(e) => createSlug(e.target.value, 'fuelslug')} defaultValue={data && data.name ? data.name : ''} onLoad={() => createSlug(e.target.value, 'fuelslug')} />
                                    <label htmlFor="name">Name</label>
                                    <div className="invalid-feedback error">{errors.name?.message}</div>

                                </div>
                                <div className="form-div">
                                    <input id="fuelslug" placeholder=' ' {...register('slug')} name="slug" type="text" defaultValue={data && data.slug ? data.slug : ''} />
                                    <label htmlFor="fuelslug">Slug</label>
                                    <div className="invalid-feedback error">{errors.slug?.message}</div>
                                </div>
                            </div>
                            <div className="common-buttons">
                                <button className="green" disabled={tinyloader} type="submit">
                                    <ButtonSpinner load={tinyloader} btnName="Save" />
                                </button>
                            </div>
                            <div>

                            </div>

                        </div>

                    </form>
                </div>
            </Layout>
        </>
    )
}