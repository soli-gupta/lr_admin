import React, { useContext, useEffect, useState } from 'react';
import axios from 'axios';
import Head from 'next/head';
import { AppContext } from '@/components/AppContext';
import { useRouter } from 'next/router';


function Login() {
    const router = useRouter()
    const { context, setContext } = useContext(AppContext)
    const [tinyloader, setTinyloader] = useState(false);
    const [formData, setFormData] = useState('')


    const eventHandler = (e) => {
        console.log(e.target.value)
        setFormData((prevState) => ({
            ...prevState,
            [e.target.name]: e.target.value
        }));
    }


    const loginSubmission = async (e) => {
        e.preventDefault();
        console.log('sadjh');
        var createError = 0;

        if (e.target.email.value.length <= 0) {
            document.getElementById('emailError').innerHTML = 'Please enter email!';
            document.getElementById("emailError").style.display = "block";
            setTimeout(() => {
                document.getElementById('emailError').innerHTML = '';
                document.getElementById("emailError").style.display = "none";
            }, 3000);
            createError++;
        }

        if (e.target.password.value.length <= 0) {
            document.getElementById('passwordError').innerHTML = 'Please enter password!';
            document.getElementById("passwordError").style.display = "block";
            setTimeout(() => {
                document.getElementById('passwordError').innerHTML = '';
                document.getElementById("passwordError").style.display = "none";
            }, 3000);
            createError++;
        }

        if (createError > 0) {
            setTinyloader(false);
            return false;
        }

        setTinyloader(true);
        await axios.post(`${process.env.NEXT_PUBLIC_URL}admin/login`, formData)
            .then(function (res) {
                if (res.data.status == 1) {
                    localStorage.setItem('lr-admin-token', res.data.token)
                    setContext(res.data.admin)
                }
                document.body.classList.remove('login');
                setTinyloader(false)
                router.push('/admin')
            })
            .catch(function (error) {
                console.log(error)
                if (error.response.data.status === 0) {
                    setTinyloader(false);
                    alert(error.response.data.message.message);

                }
            });
    };

    useEffect(() => {
        document.body.classList.add('login');
        const token = localStorage.getItem('lr-admin-token');
        if (token) {
            router.push("/")
        } else {
            router.push("/login")
        }
    }, [])


    return (
        <>
            <Head>
                <title>LR | Login</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link
                    href="/img/lr-favicon.ico"
                    rel="icon"
                    media="(prefers-color-scheme: light)"
                />
                <link
                    href="/img/lr-favicon-dark.ico"
                    rel="icon"
                    media="(prefers-color-scheme: dark)"
                />
            </Head>
            <div className="loginPage container-fluid">
                <div className="span-col-6">
                    <div className="img-box">
                        <img src="/admin_img/loginimg.png" />
                    </div>
                </div>
                <div className="span-col-6">

                    <form method="post" action="" onSubmit={(e) => loginSubmission(e)} >
                        <div className="loginWrap">
                            <svg xmlns="http://www.w3.org/2000/svg" width="62.908" height="54.673" viewBox="0 0 62.908 54.673">
                                <g id="Group_1255" data-name="Group 1255" transform="translate(-784.764 -706)">
                                    <circle id="Ellipse_14" data-name="Ellipse 14" cx="27.336" cy="27.336" r="27.336"
                                        transform="translate(793 706)" fill="#d5a300"></circle>
                                    <g id="noun-car-1857703" transform="translate(784.764 717.539)">
                                        <path id="Path_6575" data-name="Path 6575"
                                            d="M105.573,60.483a8.451,8.451,0,0,0-.061-.993,3.083,3.083,0,0,0-.178-.711,2.895,2.895,0,0,0-2.881-2.615h-.05a.671.671,0,0,1-.142-.238c-.935-2.429-1.871-4.856-2.824-7.278a3.824,3.824,0,0,0-3.842-2.675q-7.808-.042-15.616-.018a4.2,4.2,0,0,0-2.134.541A4.136,4.136,0,0,0,76.1,48.72c-.882,2.291-1.779,4.575-2.643,6.869h0a1.657,1.657,0,0,1-.3.562h-.039a2.9,2.9,0,0,0-2.885,2.639,4.5,4.5,0,0,0-.228,1.423C70,63.3,70,66.382,70,69.466a1.722,1.722,0,0,0,.018.288h2.846v.384c0,1.067-.018,2.134.035,3.223h0a2.284,2.284,0,0,0,1.444,2.081,2.554,2.554,0,0,0,3.614-2.38c.018-1.092,0-2.188,0-3.3H97.623v.647c0,1.014-.025,2.035.061,3.041a2.511,2.511,0,0,0,5-.163c.039-1.067,0-2.109.025-3.162v-.395h2.867V60.484ZM76.635,54.262c.58-1.555,1.153-3.113,1.75-4.663a1.675,1.675,0,0,1,1.739-1.174H95.463A1.654,1.654,0,0,1,97.2,49.6c.807,2.134,1.594,4.269,2.391,6.381a1.593,1.593,0,0,1,.032.167H75.934c.242-.655.47-1.27.7-1.889Zm-1.145,9.96h0a2.711,2.711,0,1,1,2.358-1.337,2.711,2.711,0,0,1-2.358,1.337Zm24.609,0a2.714,2.714,0,1,1,2.629-2.743,2.657,2.657,0,0,1-2.629,2.732Z"
                                            transform="translate(-70.001 -45.947)" fill="#fff"></path>
                                        <path id="Path_6576" data-name="Path 6576"
                                            d="M546.768,171.084a1.508,1.508,0,0,1-1.192,1c-.551.085-1.992-.139-1.985-.687s.676-2,1.458-2h.679c.782-.018,1.145,1.206,1.039,1.69Z"
                                            transform="translate(-513.509 -161.553)" fill="#fff"></path>
                                        <path id="Path_6577" data-name="Path 6577"
                                            d="M105.461,171.085a1.508,1.508,0,0,0,1.2,1c.548.085,1.992-.139,1.981-.687s-.676-2-1.459-2H106.5c-.782-.018-1.145,1.206-1.039,1.69Z"
                                            transform="translate(-103.191 -161.553)" fill="#fff"></path>
                                    </g>
                                </g>
                            </svg>
                            <h2>Sign In to your account</h2>
                            <p className="txtCenter">Enter Your details to proceed further</p>
                            <div className="input">
                                <input type="email" className="form-control" name="email" id="email" placeholder="Username*" onChange={(e) => eventHandler(e)} autoComplete="username" defaultValue="" spellCheck={false} />
                                <small id="emailError" className="error" style={{ textAlign: 'left' }} ></small>

                            </div>
                            <div className="input">
                                <input type="password" className="form-control" name="password" id="password" onChange={(e) => eventHandler(e)} placeholder="Password*" autoComplete="current-password" defaultValue="" minLength={6} title="You have to enter at least 6 digit!" />
                                <small id="passwordError" className="error" style={{ textAlign: 'left' }}></small>

                            </div>
                            <button type='submit' className="common-button-style" disabled={tinyloader}>Login
                                {/* <ButtonSpinner load={tinyloader} btnName="Login" /> */}
                            </button>

                        </div>
                    </form>
                </div>
            </div>

        </>
    )
}

export default Login